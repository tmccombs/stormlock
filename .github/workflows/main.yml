name: Main

on:
  push:
    branches:
      - '*'
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Install
        run: uv sync --all-extras --dev
      - name: ruff lint
        run: uvx ruff check --output-format=github .
      - name: format
        run: uvx ruff format --diff
      - name: MyPy
        run: |
          uvx mypy .
  test:
    runs-on: ubuntu-latest
    container: python
    strategy:
      fail-fast: false
      matrix:
        backend: [redis, etcd, dynamodb, postgresql, mysql]
    services:
      etcd:
        image: quay.io/coreos/etcd:v3.4.10
        env:
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      dynamodb:
        image: amazon/dynamodb-local
      postgresql:
        image: postgres
        env:
          POSTGRES_USER: test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: test
        options: >-
          --health-cmd mysqladmin ping -h localhost
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Install
        run: uv sync --extra ${{ matrix.backend }}
      - name: Setup dynamodb
        if: matrix.backend == 'dynamodb'
        run: uv run setup/dynamodb.py ci
      - name: Setup postgresql
        if: matrix.backend == 'postgresql'
        run: uv run setup/sql.py postgresql://test@postgresql
      - name: Setup mysql
        if: matrix.backend == 'mysql'
        run: uv run setup/sql.py mysql://test:test@mysql/test
      - name: Test CLI
        run: uv run tests/test_cli.sh
        env:
          STORMLOCK_CONFIG: tests/ci/${{ matrix.backend }}.cfg
