name: Main

on:
  push:
    branches:
      - '*'
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Poetry cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('poetry.lock') }}-lint
          path: ~/.cache/pypoetry
          restore-keys: |
            poetry-${{ hashFiles('poetry.lock') }}-
            poetry-
      - uses: actions/setup-python@v3
        with:
          python-version: '3.12'
      - name: Install
        run: |
          pipx install poetry ruff
          poetry install --all-extras
          poetry run pip install mypy pylint
      - name: ruff
        run: ruff check --output-format=github .
      - name: Lint
        run: |
          poetry run mypy .
          poetry run pylint stormlock
  test:
    runs-on: ubuntu-latest
    container: python
    strategy:
      fail-fast: false
      matrix:
        backend: [redis, etcd, dynamodb, postgresql, mysql]
    services:
      etcd:
        image: quay.io/coreos/etcd:v3.4.10
        env:
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      dynamodb:
        image: amazon/dynamodb-local
      postgresql:
        image: postgres
        env:
          POSTGRES_USER: test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mariadb
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test

    steps:
      - uses: actions/checkout@v3
      - name: Poetry cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('poetry.lock') }}-${{ matrix.backend }}
          path: ~/.cache/pypoetry
          restore-keys: |
            poetry-${{ hashFiles('poetry.lock') }}-
            poetry-
      - name: Install
        run: |
          pip install poetry
          poetry install -E ${{ matrix.backend }}
      - name: Setup dynamodb
        if: matrix.backend == 'dynamodb'
        run: poetry run python setup/dynamodb.py ci
      - name: Setup postgresql
        if: matrix.backend == 'postgresql'
        run: poetry run python setup/sql.py postgresql://test@postgresql
      - name: Setup mysql
        if: matrix.backend == 'mysql'
        run: poetry run python setup/sql.py mysql://root:test@mysql/test
      - name: Test CLI
        run: poetry run tests/test_cli.sh
        env:
          STORMLOCK_CONFIG: tests/ci/${{ matrix.backend }}.cfg
